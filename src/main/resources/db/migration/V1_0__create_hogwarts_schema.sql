CREATE SCHEMA IF NOT EXISTS HOGWARTS;
SET search_path TO HOGWARTS, public;

CREATE TABLE IF NOT EXISTS HOGWARTS.ROLE (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.GROUP (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.USER (
    ID BIGSERIAL PRIMARY KEY,
    GROUP_ID BIGINT,
--    SUBJECT_ID BIGINT,
    FIRST_NAME TEXT NOT NULL,
    LAST_NAME TEXT NOT NULL,
    CONSTRAINT GROUP_ID_FK FOREIGN KEY (GROUP_ID) REFERENCES HOGWARTS.GROUP (ID) ON DELETE CASCADE,
    CONSTRAINT SUBJECT_ID_FK FOREIGN KEY (SUBJECT_ID) REFERENCES HOGWARTS.SUBJECT (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.USER_ROLE (
    USER_ID BIGINT,
    ROLE_ID BIGINT,
    UNIQUE (USER_ID, ROLE_ID),
    CONSTRAINT USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES HOGWARTS.USER (ID) ON DELETE CASCADE,
    CONSTRAINT ROLE_ID_FK FOREIGN KEY (ROLE_ID) REFERENCES HOGWARTS.ROLE (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.LESSON_START_END_TIME (
    ID BIGINT PRIMARY KEY,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL
);

CREATE SEQUENCE HOGWARTS.LESSON_START_END_TIME_ID_SEQ
    START 1
    INCREMENT 1
    OWNED BY HOGWARTS.LESSON_START_END_TIME.ID;

CREATE TABLE IF NOT EXISTS HOGWARTS.CLASSROOM (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE,
    DESCRIPTION TEXT
);

CREATE TABLE IF NOT EXISTS HOGWARTS.SUBJECT (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE,
    DESCRIPTION TEXT,
    PROFESSOR_ID BIGINT,
    CLASSROOM_ID BIGINT,
    CONSTRAINT PROFESSOR_FK FOREIGN KEY (PROFESSOR_ID) REFERENCES HOGWARTS.USER (ID) ON DELETE CASCADE,
    CONSTRAINT CLASSROOM_FK FOREIGN KEY (CLASSROOM_ID) REFERENCES HOGWARTS.CLASSROOM (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.LESSON (
    ID BIGSERIAL PRIMARY KEY,
    LESSON_DATE DATE,
    START_END_TIME_ID BIGINT,
    SUBJECT_ID BIGINT,
    GROUP_ID BIGINT,
    UNIQUE (LESSON_DATE, START_END_TIME_ID, GROUP_ID),
    CONSTRAINT START_END_TIME_ID_FK FOREIGN KEY (START_END_TIME_ID) REFERENCES HOGWARTS.LESSON_START_END_TIME (ID) ON DELETE CASCADE,
    CONSTRAINT SUBJECT_ID_FK FOREIGN KEY (SUBJECT_ID) REFERENCES HOGWARTS.SUBJECT (ID) ON DELETE CASCADE,
    CONSTRAINT GROUP_ID_FK FOREIGN KEY (GROUP_ID) REFERENCES HOGWARTS.GROUP (ID) ON DELETE CASCADE
);

INSERT INTO HOGWARTS.ROLE (NAME) VALUES
('student'),
('professor'),
('admin');

CREATE FUNCTION trigger_function()
   RETURNS TRIGGER
   LANGUAGE PLPGSQL
AS $$
DECLARE
    allowed_professor_id BIGINT;
BEGIN
    select INTO allowed_professor_id id
      from HOGWARTS.ROLE where name LIKE 'professor';

    IF allowed_professor_id <> NEW.ID
    THEN
        RAISE EXCEPTION 'some error';
    END IF;
END;
$$