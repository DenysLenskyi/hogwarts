CREATE SCHEMA IF NOT EXISTS HOGWARTS;
SET search_path TO HOGWARTS, public;

CREATE TABLE IF NOT EXISTS HOGWARTS.ROLE (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.GROUP (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.USER (
    ID BIGSERIAL PRIMARY KEY,
    GROUP_ID BIGINT,
    FIRST_NAME TEXT NOT NULL,
    LAST_NAME TEXT NOT NULL,
    CONSTRAINT GROUP_ID_FK FOREIGN KEY (GROUP_ID) REFERENCES HOGWARTS.GROUP (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.USER_ROLE (
    USER_ID BIGINT,
    ROLE_ID BIGINT,
    UNIQUE (USER_ID, ROLE_ID),
    CONSTRAINT USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES HOGWARTS.USER (ID) ON DELETE CASCADE,
    CONSTRAINT ROLE_ID_FK FOREIGN KEY (ROLE_ID) REFERENCES HOGWARTS.ROLE (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.LESSON_START_END_TIME (
    ID BIGINT PRIMARY KEY,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL
);

CREATE SEQUENCE HOGWARTS.LESSON_START_END_TIME_ID_SEQ
    START 1
    INCREMENT 1
    OWNED BY HOGWARTS.LESSON_START_END_TIME.ID;

CREATE TABLE IF NOT EXISTS HOGWARTS.CLASSROOM (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE,
    DESCRIPTION TEXT
);

CREATE TABLE IF NOT EXISTS HOGWARTS.SUBJECT (
    ID BIGSERIAL PRIMARY KEY,
    NAME TEXT NOT NULL UNIQUE,
    DESCRIPTION TEXT,
    PROFESSOR_ID BIGINT,
    CLASSROOM_ID BIGINT,
    CONSTRAINT PROFESSOR_FK FOREIGN KEY (PROFESSOR_ID) REFERENCES HOGWARTS.USER (ID) ON DELETE CASCADE,
    CONSTRAINT CLASSROOM_FK FOREIGN KEY (CLASSROOM_ID) REFERENCES HOGWARTS.CLASSROOM (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS HOGWARTS.LESSON (
    ID BIGSERIAL PRIMARY KEY,
    LESSON_DATE DATE,
    START_END_TIME_ID BIGINT,
    SUBJECT_ID BIGINT,
    GROUP_ID BIGINT,
    UNIQUE (LESSON_DATE, START_END_TIME_ID, GROUP_ID),
    CONSTRAINT START_END_TIME_ID_FK FOREIGN KEY (START_END_TIME_ID) REFERENCES HOGWARTS.LESSON_START_END_TIME (ID) ON DELETE CASCADE,
    CONSTRAINT SUBJECT_ID_FK FOREIGN KEY (SUBJECT_ID) REFERENCES HOGWARTS.SUBJECT (ID) ON DELETE CASCADE,
    CONSTRAINT GROUP_ID_FK FOREIGN KEY (GROUP_ID) REFERENCES HOGWARTS.GROUP (ID) ON DELETE CASCADE
);

----------------------------------------------------------------------------------
-- check for table HOGWARTS.SUBJECT. Only users with `professor` role can be in PROFESSOR_ID
----------------------------------------------------------------------------------
CREATE FUNCTION check_professor_role_id()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    professor_role_id BIGINT;
    current_role_id BIGINT;
BEGIN
    select INTO professor_role_id id
      from HOGWARTS.ROLE where name LIKE 'professor';

    select into current_role_id role_id
      from HOGWARTS.USER_ROLE where user_id = NEW.PROFESSOR_ID;

    IF professor_id <> current_role_id
    THEN
        RAISE EXCEPTION 'in table HOGWARTS.SUBJECT column PROFESSOR_ID can save only users with role `professor`';
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER professor_role_id_trigger
    BEFORE INSERT OR UPDATE ON HOGWARTS.SUBJECT
    FOR EACH ROW
    EXECUTE FUNCTION check_professor_role_id();

----------------------------------------------------------------------------------
-- check for table HOGWARTS.USER. Only users with `student` role can have GROUP_ID
----------------------------------------------------------------------------------
CREATE FUNCTION validate_group()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
$$
DECLARE
    new_user_role TEXT;
    new_user_group_id BIGINT;
BEGIN
    select INTO new_user_role R.NAME
      from HOGWARTS.ROLE R
     where R.ID = NEW.ROLE_ID;

    select into new_user_group_id GROUP_ID
      from HOGWARTS.USER where id = NEW.USER_ID;

    IF new_user_role = 'student' AND new_user_group_id IS NULL
    THEN
        RAISE EXCEPTION 'in table HOGWARTS.USER column GROUP_ID must have value for users with role `student`';
    ELSIF new_user_role = 'admin' OR new_user_role = 'professor' AND new_user_group_id IS NOT NULL
    THEN
        RAISE EXCEPTION 'in table HOGWARTS.USER column GROUP_ID should not have value for users with role `admin` or `professor`';
    ELSE
        RETURN NEW;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER user_group_trigger
    BEFORE INSERT OR UPDATE ON HOGWARTS.USER_ROLE
    FOR EACH ROW
    EXECUTE FUNCTION validate_group();
